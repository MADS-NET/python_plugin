/*
  ____  _       _            _             _       
 / ___|(_)_ __ | | __  _ __ | |_   _  __ _(_)_ __  
 \___ \| | '_ \| |/ / | '_ \| | | | |/ _` | | '_ \ 
  ___) | | | | |   <  | |_) | | |_| | (_| | | | | |
 |____/|_|_| |_|_|\_\ | .__/|_|\__,_|\__, |_|_| |_|
                      |_|            |___/         
# A Template for PythonSinkPlugin, a Sink Plugin
# Generated by the command: plugin -t sink -d python_plugin python_sink
# Hostname: Fram-IV.local
# Current working directory: /Users/p4010/Develop/MADS_plugins
# Creation date: 2024-08-30T09:11:16.175+0200
# NOTICE: MADS Version 1.2.0
*/

// Mandatory included headers
#include <sink.hpp>
#include <nlohmann/json.hpp>
#include <pugg/Kernel.h>
// other includes as needed here
#include "common.hpp"

// Define the name of the plugin
#ifndef PLUGIN_NAME
#define PLUGIN_NAME "python_sink"
#endif

// Load the namespaces
using namespace std;
using json = nlohmann::json;


// Plugin class. This shall be the only part that needs to be modified,
// implementing the actual functionality
class PythonSinkPlugin : public Sink<json>, public MADS::PythonPlugin {

public:

  string kind() override { return PLUGIN_NAME; }

  return_type load_data(json const &input, string topic = "") override {
    string const load_topic = "mads.topic = '" + topic + "'";
    string const load_data = "mads.data = " + input.dump();
    try {
      cppy3::exec(load_topic);
      cppy3::exec(load_data);
      cppy3::exec("mads.deal_with_data()");
    } catch (cppy3::PythonException &e) {
      cerr << "[Python] Error loading data: " << e.what();
      return return_type::error;
    }
    return return_type::success;
  }

  void set_params(void const *params) override {
    Sink::set_params(params);
    _params["python_module"] = "sink";
    _params["search_paths"] = json::array();
    _params["venv"] = "";
    _params.merge_patch(*(json *)params);
    for (auto &path : _params["search_paths"]) {
      _default_paths.push_back(path.get<string>());
    }
    _python_module = _params["python_module"].get<string>();

    try {
      setup_venv(_params);
    } catch (exception &e) {
      cerr << "[Python] Error preparing Python: " << e.what();
      exit(EXIT_FAILURE);
    }
    prepare_python(_params);
  }


  map<string, string> info() override { 
    return {{"module", _python_module}}; 
  };

private:

};



/*
  ____  _             _             _      _                
 |  _ \| |_   _  __ _(_)_ __     __| |_ __(_)_   _____ _ __ 
 | |_) | | | | |/ _` | | '_ \   / _` | '__| \ \ / / _ \ '__|
 |  __/| | |_| | (_| | | | | | | (_| | |  | |\ V /  __/ |   
 |_|   |_|\__,_|\__, |_|_| |_|  \__,_|_|  |_| \_/ \___|_|   
                |___/                                      
Enable the class as plugin 
*/
INSTALL_SINK_DRIVER(PythonSinkPlugin, json)


/*
                  _
  _ __ ___   __ _(_)_ __
 | '_ ` _ \ / _` | | '_ \
 | | | | | | (_| | | | | |
 |_| |_| |_|\__,_|_|_| |_|

For testing purposes, when directly executing the plugin
*/

#include <cstdlib>

int main(int argc, char const *argv[]) {
  PythonSinkPlugin plugin;
  json input, params;
  
  // Set example values to params
  char *venv_path = getenv("VIRTUAL_ENV");
  if (venv_path && strlen(venv_path) > 0) {
    cerr << "Using virtual environment from VIRTUAL_ENV shell var: " << venv_path << endl;
    params["venv"] = venv_path;
  } else {
    cerr << "No virtual environment found. Using system Python." << endl;
  }
  params["python_module"] = "sink";
  if (argc > 1) {
    params["python_module"] = argv[1];
  }

  // Set the parameters
  plugin.set_params(&params);

  input["key"] = "value";
  // Process data
  plugin.load_data(input, "test_topic");

  return 0;
}
